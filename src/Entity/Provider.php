<?php

declare(strict_types=1);

/*
 * (c) 2021 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Nines\UtilBundle\Entity\AbstractEntity;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Provider.
 *
 * Any OJS provider may make deposits to the PLN.
 *
 * @ORM\Entity(repositoryClass="App\Repository\ProviderRepository")
 * @ORM\Table(indexes={
 *     @ORM\Index(columns={"uuid", "name", "email"}, flags={"fulltext"}),
 *     @ORM\Index(columns={"uuid"})
 * })
 */
class Provider extends AbstractEntity {
    /**
     * Provider UUID, as generated by the PLN plugin.
     *
     * @var string
     * @ORM\Column(type="string", length=36, nullable=false)
     */
    private $uuid;

    /**
     * The title of the provider.
     *
     * @var string
     * @ORM\Column(type="string", nullable=false)
     */
    private $name;

    /**
     * The email of the provider.
     *
     * @var string
     * @ORM\Column(type="string", nullable=true)
     * @Assert\Email(mode="html5",normalizer="trim")
     */
    private $email;

    /**
     * The provider's deposits.
     *
     * @var Collection|Deposit[]
     * @ORM\OneToMany(targetEntity="Deposit", mappedBy="provider")
     */
    private $deposits;

    /**
     * List of states where a deposit has been sent to LOCKSSOMatic.
     *
     * This should be a constant array, but those aren't supported in PHP 5.4.
     *
     * @var array
     */
    public static $SENTSTATES = [
        'deposited',
        'complete',
        'status-error',
    ];

    /**
     * Construct a new Provider.
     */
    public function __construct() {
        parent::__construct();
        $this->deposits = new ArrayCollection();
    }

    public function __toString() : string {
        return $this->name ?? '(unknown)';
    }

    public function getUuid() : ?string {
        return $this->uuid;
    }

    public function setUuid(string $uuid) : self {
        $this->uuid = mb_strtoupper($uuid);

        return $this;
    }

    public function getName() : ?string {
        return $this->name;
    }

    public function setName(string $name) : self {
        $this->name = $name;

        return $this;
    }

    public function getEmail() : ?string {
        return $this->email;
    }

    public function setEmail(?string $email) : self {
        $this->email = $email;

        return $this;
    }

    /**
     * @return Collection|Deposit[]
     */
    public function getDeposits() : Collection {
        return $this->deposits;
    }

    public function getCompletedDeposits() : Collection {
        $collection = new ArrayCollection();
        foreach($this->deposits as $d) {
            if($d->getState() === 'completed') {
                $collection[] = $d;
            }
        }
        return $collection;
    }

    public function addDeposit(Deposit $deposit) : self {
        if ( ! $this->deposits->contains($deposit)) {
            $this->deposits[] = $deposit;
            $deposit->setProvider($this);
        }

        return $this;
    }

    public function removeDeposit(Deposit $deposit) : self {
        if ($this->deposits->removeElement($deposit)) {
            // set the owning side to null (unless already changed)
            if ($deposit->getProvider() === $this) {
                $deposit->setProvider(null);
            }
        }

        return $this;
    }
}
